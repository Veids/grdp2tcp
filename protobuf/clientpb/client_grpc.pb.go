// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: clientpb/client.proto

package clientpb

import (
	context "context"
	commonpb "github.com/Veids/grdp2tcp/protobuf/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientRpcClient is the client API for ClientRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientRpcClient interface {
	// *** Socks ***
	SocksStart(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error)
	SocksStop(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Reverse ***
	ReverseStart(ctx context.Context, in *commonpb.AddrPack, opts ...grpc.CallOption) (*commonpb.Empty, error)
	ReverseStop(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error)
	// *** Common ***
	List(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*EndpointList, error)
}

type clientRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewClientRpcClient(cc grpc.ClientConnInterface) ClientRpcClient {
	return &clientRpcClient{cc}
}

func (c *clientRpcClient) SocksStart(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/clientpb.ClientRpc/SocksStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRpcClient) SocksStop(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/clientpb.ClientRpc/SocksStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRpcClient) ReverseStart(ctx context.Context, in *commonpb.AddrPack, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/clientpb.ClientRpc/ReverseStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRpcClient) ReverseStop(ctx context.Context, in *commonpb.Addr, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/clientpb.ClientRpc/ReverseStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRpcClient) List(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*EndpointList, error) {
	out := new(EndpointList)
	err := c.cc.Invoke(ctx, "/clientpb.ClientRpc/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientRpcServer is the server API for ClientRpc service.
// All implementations should embed UnimplementedClientRpcServer
// for forward compatibility
type ClientRpcServer interface {
	// *** Socks ***
	SocksStart(context.Context, *commonpb.Addr) (*commonpb.Empty, error)
	SocksStop(context.Context, *commonpb.Addr) (*commonpb.Empty, error)
	// *** Reverse ***
	ReverseStart(context.Context, *commonpb.AddrPack) (*commonpb.Empty, error)
	ReverseStop(context.Context, *commonpb.Addr) (*commonpb.Empty, error)
	// *** Common ***
	List(context.Context, *commonpb.Empty) (*EndpointList, error)
}

// UnimplementedClientRpcServer should be embedded to have forward compatible implementations.
type UnimplementedClientRpcServer struct {
}

func (UnimplementedClientRpcServer) SocksStart(context.Context, *commonpb.Addr) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocksStart not implemented")
}
func (UnimplementedClientRpcServer) SocksStop(context.Context, *commonpb.Addr) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocksStop not implemented")
}
func (UnimplementedClientRpcServer) ReverseStart(context.Context, *commonpb.AddrPack) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseStart not implemented")
}
func (UnimplementedClientRpcServer) ReverseStop(context.Context, *commonpb.Addr) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReverseStop not implemented")
}
func (UnimplementedClientRpcServer) List(context.Context, *commonpb.Empty) (*EndpointList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeClientRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientRpcServer will
// result in compilation errors.
type UnsafeClientRpcServer interface {
	mustEmbedUnimplementedClientRpcServer()
}

func RegisterClientRpcServer(s grpc.ServiceRegistrar, srv ClientRpcServer) {
	s.RegisterService(&ClientRpc_ServiceDesc, srv)
}

func _ClientRpc_SocksStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRpcServer).SocksStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientRpc/SocksStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRpcServer).SocksStart(ctx, req.(*commonpb.Addr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRpc_SocksStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRpcServer).SocksStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientRpc/SocksStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRpcServer).SocksStop(ctx, req.(*commonpb.Addr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRpc_ReverseStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.AddrPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRpcServer).ReverseStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientRpc/ReverseStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRpcServer).ReverseStart(ctx, req.(*commonpb.AddrPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRpc_ReverseStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Addr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRpcServer).ReverseStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientRpc/ReverseStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRpcServer).ReverseStop(ctx, req.(*commonpb.Addr))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRpc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRpcServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientpb.ClientRpc/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRpcServer).List(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientRpc_ServiceDesc is the grpc.ServiceDesc for ClientRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientpb.ClientRpc",
	HandlerType: (*ClientRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SocksStart",
			Handler:    _ClientRpc_SocksStart_Handler,
		},
		{
			MethodName: "SocksStop",
			Handler:    _ClientRpc_SocksStop_Handler,
		},
		{
			MethodName: "ReverseStart",
			Handler:    _ClientRpc_ReverseStart_Handler,
		},
		{
			MethodName: "ReverseStop",
			Handler:    _ClientRpc_ReverseStop_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClientRpc_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientpb/client.proto",
}
